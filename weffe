#!/bin/bash
video=false
process=true
input=0
output=7
watermark=false
toptext=false
bottomtext=false
font="Arial"
memestr=""
rotate=false
rotatestr=""
blur=false
blurtype=""
blurstr=""
nextinput=1
inputstr=""
filterstr=""
printffmpeg=false
strongblur=false
rotatefactor="2*PI*t/6"
activate=false
rootdir="$(dirname "$0")"
monitor=false

set +e

while getopts ":hv:rsi:o:w:t:b:f:z:B:SpaMl" opt; do
  case $opt in
  	a) activate=true
	;;
    v) video="$OPTARG"
    ;;
    r) rotate=true
    ;;
    s) process=false
	;;
	i) input="$OPTARG"
	;;
	o) output="$OPTARG"
	;;
	w) watermark="$OPTARG"
    ;;
    t) toptext="$OPTARG"
	;;
	b) bottomtext="$OPTARG"
	;;
	f) font="$OPTARG"
	;;
    z) rotate=true
		rotatefactor="$OPTARG"
    ;;
    h) cat "$rootdir/help.md"
        exit 0
    ;;
    B) blur=true
		blurtype=$OPTARG
	;;
	S) strongblur=true
	;;
	p) printffmpeg=true
	;;
	M) monitor=true
	;;
	l) printf "v4l2-ctl --list-devices\n\n"
		v4l2-ctl --list-devices
		exit 0
	;;
    \?) echo "Invalid option -$OPTARG" >&2
		exit 0
    ;;
  esac
done

if $activate
then
	echo "Initializing virtual camera at /dev/video${output}"
	echo "This may require sudo access"
	modstatus=$( lsmod | grep v4l2loopback 2>&1 )
	if [ -z "$modstatus" ]
	then
		echo "No existing virtual camera found"
	else
		echo "Removing existing virtual camera"
		sudo modprobe -r v4l2loopback
	fi
	sudo modprobe v4l2loopback exclusive_caps=1 video_nr=$output card_label="Weffe"
	echo "Initialized"
	exit 0
fi

firstinput=false

if [[ $video != false ]]
then # if streaming a video
	if [[ $process = true ]]
	then # process the video input
		echo "Pre-processing $video"
        ffmpeg -hide_banner -loglevel warning -y -i "$video" -filter_complex "[0]split=2[fr][rv]; \
            [rv]reverse[rv];[fr][rv]concat=n=2:v=1:a=0,format=yuv420p[v]" \
            -map "[v]" -g 30 stream.mp4
        echo "Finished processing $video"
    else
        \cp -r "$video" stream.mp4
    fi
    inputstr="-stream_loop -1 -re -i stream.mp4"
    firstinput="stream.mp4"
else # if streaming from a webcam
	inputstr="-i /dev/video$input"
	firstinput="/dev/video$input"
fi

# process blur background
if [ $blur = true ]
then
	strongblur1="luma_radius=min(w\,h)/5:chroma_radius=min(min(cw\,ch)\,120):luma_power=1"
	strongblur2="luma_radius=min(w\,h)/15:chroma_radius=min(min(cw\,ch)\,120)/2:luma_power=1"
	weakblur1=$strongblur2
	weakblur2="luma_radius=min(w\,h)/25:chroma_radius=min(min(cw\,ch)\,120)/4:luma_power=1"

	if [[ $strongblur = true ]]
	then
		blur1=$strongblur1
		blur2=$strongblur2
	else
		blur1=$weakblur1
		blur2=$weakblur2
	fi

	case $blurtype in 
		square)
			blurimg="$rootdir/static/blur_square.png"
		;;
		rect)
			blurimg="$rootdir/static/blur_rect.png"
		;;
		portrait)
			blurimg="$rootdir/static/blur_portrait.png"
		;;
		circle)
			blurimg="$rootdir/static/blur_circle.png"
		;;
		ellipse)
			blurimg="$rootdir/static/blur_ellipse.png"
		;;
		*) echo "Invalid blur type \"$blurtype\"" >&2
			exit 0
		;;
	esac

	# adapted from https://stackoverflow.com/a/45119116/12940893
	blurstr="[v]split=3[v3][v2][v];[v2]boxblur=${blur1}[bg]; \
		[$nextinput]alphaextract[circ];[circ][v3]scale2ref[i][m]; \
		[m][i]overlay=format=auto,format=yuv420p[mask]; \
		[v][mask]alphamerge[fg];[bg][fg]overlay[v];"
	nextinput=$((nextinput+1))
	inputstr="${inputstr} -i $blurimg"

	filterstr="${filterstr}${blurstr}"
fi

# process watermark
if [[ $watermark != false ]]
then
	waterstr="[$nextinput][v]scale2ref[i][m];[m][i]overlay=format=auto[v];"
	nextinput=$((nextinput+1))
	inputstr="${inputstr} -i $watermark"
	filterstr="${filterstr}${waterstr}"
fi

# process text
if [[ $toptext != false ]] && [[ $bottomtext != false ]]
then
	if ! [[ -f $toptext ]] || ! [[ -f $bottomtext ]]
	then
		echo "$toptext" | tr '[:lower:]' '[:upper:]' > "$rootdir/top.txt"
		echo "$bottomtext" | tr '[:lower:]' '[:upper:]' > "$rootdir/bottom.txt"
		toptext="$rootdir/top.txt"
		bottomtext="$rootdir/bottom.txt"
	fi

	topplaintext=$(more $toptext | tr '[:lower:]' '[:upper:]')
	toptextlen=$(expr length "$topplaintext")
	toptextfs=$((240 / ($toptextlen / 5 + 1) ))
	
	bottomplaintext=$(more $bottomtext | tr '[:lower:]' '[:upper:]')
	bottomtextlen=$(expr length "$bottomplaintext")
	bottomtextfs=$((240 / ($bottomtextlen / 5 + 1) ))
	
	memestr="[v]drawtext=font='$font': \
		textfile='$toptext': x=(w-tw)/2: y=(h-text_h)/6: reload=1: \
		fontsize=$toptextfs: fontcolor='AntiqueWhite': borderw=4, \
		drawtext=font='$font': \
		textfile='$bottomtext':x=(w-tw)/2:y=5*(h-text_h)/6: reload=1: \
		fontsize=$bottomtextfs: fontcolor='AntiqueWhite': borderw=4[v];"

	filterstr="${filterstr}${memestr}" 
fi

# process rotate
if [[ $rotate != false ]]
then
	rotatestr="[v]rotate=${rotatefactor}[v];"
	filterstr="${filterstr}${rotatestr}"
fi

# remove whitespace from filter string
# TODO: allow whitespaces in file names and filter text string
# filterstr=$(echo "$filterstr" | sed -r 's/\s+//g')

outputsize=$(ffprobe -v error -show_entries stream=width,height -of csv=p=0:s=x $firstinput)

filterstr="[0]split=1[v];${filterstr}[v]format=yuv420p[v]"
alt_filterstr="color=c=#543c00:s=$outputsize,realtime,format=yuv420p[v]"

# potentially add -loglevel warning in a -q flag
ffmpegstr="ffmpeg -hide_banner $inputstr \
	-filter_complex \"${filterstr}\" \
	-map "[v]" -f v4l2 \"/dev/video$output\""
alt_ffmpegstr="ffmpeg -hide_banner \
	-filter_complex \"${alt_filterstr}\" \
	-map "[v]" -f v4l2 \"/dev/video$output\""

# remove more whitespace
ffmpegstr=$(echo "$ffmpegstr" | sed -r 's/\s+/ /g')

# print command
if [[ $printffmpeg != false ]]
then
	echo "Generated command:"
	echo "$ffmpegstr"
fi

if [[ $monitor == false ]]
then
	sh -c "$ffmpegstr"
	exit
fi

set +e
state_machine='
	BEGIN {
		state = "START_IDLE"
		count = 0
		print "IDLE"
	}
	/OPEN/ {
		count++
		if (state == "START_IDLE") {
			state = "IDLE"
		} else if (state == "IDLE") {
			state = "STOP_IDLE"
			print "STOP"
		} else if (state == "START_STREAM") {
			state = "STREAM"
		} else if (state == "ABORT_STREAM") {
			state = "STOP_STREAM"
			print "STOP"
		} else if (state == "STOP_STREAM") {
			state = "RESTART_STREAM"
		} else if (state == "STOP_IDLE" || state == "STREAM" || state == "RESTART_STREAM" ) {
			# Waiting for previous instance to close to switch streams.
		} else {
			print "Unexpected OPEN event in state " state
			next
		}
	}
	/CLOSE/ {
		count--
		if (state == "IDLE") {
			exit
		} else if (state == "STOP_IDLE" || state == "RESTART_STREAM") {
			state = "START_STREAM"
			print "STREAM"
		} else if (state == "START_STREAM") {
			if (count == 0) {
				state = "ABORT_STREAM"
			}
		} else if (state == "STREAM") {
			if (count == 1) {
				state = "STOP_STREAM"
				print "STOP"
			}
		} else if (state == "STOP_STREAM") {
			state = "START_IDLE"
			print "IDLE"
		} else {
			print "Unexpected CLOSE event in state " state
			next
		}
	}
	{
		print "<" state " @ " count ">"
	}'

set -e

inotifywait -q -me open,close /dev/video$output \
	| stdbuf -oL awk "$state_machine" \
	| while read -r action
		do
			echo "$action"
			if [ "$action" = "IDLE" ]
			then
				sh -c "$alt_ffmpegstr" &
				pid=$!
			elif [ "$action" = "STREAM" ]
			then
				sh -c "$ffmpegstr" &
				pid=$!
			elif [ "$action" = "STOP" ]
			then
				kill $pid &
			fi
		done